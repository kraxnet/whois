# encoding: utf-8

# This file is autogenerated. Do not edit it manually.
# If you want change the content of this file, edit
#
#   /spec/fixtures/responses/whois.nic.cz/cz/status_registered.expected
#
# and regenerate the tests with the following rake task
#
#   $ rake spec:generate
#

require 'spec_helper'
require 'whois/record/parser/whois.nic.cz.rb'

describe Whois::Record::Parser::WhoisNicCz, "status_registered.expected" do

  subject do
    file = fixture("responses", "whois.nic.cz/cz/status_registered.txt")
    part = Whois::Record::Part.new(body: File.read(file))
    described_class.new(part)
  end

  describe "#disclaimer" do
    it do
      expect(subject.disclaimer).to eq(" (c) 2006-2017 CZ.NIC, z.s.p.o.\n\nIntended use of supplied data and information\n\nData contained in the domain name register, as well as information\nsupplied through public information services of CZ.NIC association,\nare appointed only for purposes connected with Internet network\nadministration and operation, or for the purpose of legal or other\nsimilar proceedings, in process as regards a matter connected\nparticularly with holding and using a concrete domain name.\n\nFull text available at:\nhttp://www.nic.cz/page/306/intended-use-of-supplied-data-and-information/\n\nSee also a search service at http://www.nic.cz/whois/\n\n")
    end
  end
  describe "#domain" do
    it do
      expect(subject.domain).to eq("nic.cz")
    end
  end
  describe "#domain_id" do
    it do
      expect { subject.domain_id }.to raise_error(Whois::AttributeNotSupported)
    end
  end
  describe "#status" do
    it do
      expect(subject.status).to be_a(Array)
      expect(subject.status).to eq([:update_forbidden])
    end
  end
  describe "#available?" do
    it do
      expect(subject.available?).to eq(false)
    end
  end
  describe "#registered?" do
    it do
      expect(subject.registered?).to eq(true)
    end
  end
  describe "#created_on" do
    it do
      expect(subject.created_on).to be_a(Time)
      expect(subject.created_on).to eq(Time.parse("30.10.1997 01:00:00"))
    end
  end
  describe "#updated_on" do
    it do
      expect(subject.updated_on).to be_a(Time)
      expect(subject.updated_on).to eq(Time.parse("22.11.2016 15:07:40"))
    end
  end
  describe "#expires_on" do
    it do
      expect(subject.expires_on).to be_a(Time)
      expect(subject.expires_on).to eq(Time.parse("15.03.2027"))
    end
  end
  describe "#registrar" do
    it do
      expect(subject.registrar).to be_a(Whois::Record::Registrar)
      expect(subject.registrar.id).to eq("REG-CZNIC")
      expect(subject.registrar.name).to eq("REG-CZNIC")
    end
  end
  describe "#registrant_contacts" do
    it do
      expect(subject.registrant_contacts).to be_a(Array)
      expect(subject.registrant_contacts.size).to eq(1)
      expect(subject.registrant_contacts[0]).to be_a(Whois::Record::Contact)
      expect(subject.registrant_contacts[0].type).to eq(Whois::Record::Contact::TYPE_REGISTRANT)
      expect(subject.registrant_contacts[0].id).to eq("CZ-NIC")
      expect(subject.registrant_contacts[0].name).to eq("CZ.NIC, z.s.p.o.")
      expect(subject.registrant_contacts[0].organization).to eq("CZ.NIC, z.s.p.o.")
      expect(subject.registrant_contacts[0].address).to eq("Milesovska 1136/5\nPraha 3\n130 00\nCZ")
      expect(subject.registrant_contacts[0].city).to eq(nil)
      expect(subject.registrant_contacts[0].zip).to eq(nil)
      expect(subject.registrant_contacts[0].state).to eq(nil)
      expect(subject.registrant_contacts[0].country_code).to eq(nil)
      expect(subject.registrant_contacts[0].email).to eq("admin@nic.cz")
      expect(subject.registrant_contacts[0].created_on).to eq(Time.parse("17.10.2008 12:08:21"))
      expect(subject.registrant_contacts[0].updated_on).to eq(Time.parse("09.01.2015 11:09:33"))
    end
  end
  describe "#admin_contacts" do
    it do
      expect(subject.admin_contacts).to be_a(Array)
      expect(subject.admin_contacts.size).to eq(2)
      expect(subject.admin_contacts[0]).to be_a(Whois::Record::Contact)
      expect(subject.admin_contacts[0].type).to eq(Whois::Record::Contact::TYPE_ADMINISTRATIVE)
      expect(subject.admin_contacts[0].id).to eq("FEELA")
      expect(subject.admin_contacts[0].name).to eq("Ondřej Filip")
      expect(subject.admin_contacts[0].organization).to eq(nil)
      expect(subject.admin_contacts[0].address).to eq("Jeseniova 2852/16\nPraha 3\n13000\nCZ")
      expect(subject.admin_contacts[0].city).to eq(nil)
      expect(subject.admin_contacts[0].zip).to eq(nil)
      expect(subject.admin_contacts[0].state).to eq(nil)
      expect(subject.admin_contacts[0].country_code).to eq(nil)
      expect(subject.admin_contacts[0].phone).to eq(nil)
      expect(subject.admin_contacts[0].fax).to eq(nil)
      expect(subject.admin_contacts[0].email).to eq(nil)
      expect(subject.admin_contacts[0].created_on).to eq(Time.parse("04.01.2005 13:35:00"))
      expect(subject.admin_contacts[0].updated_on).to eq(Time.parse("17.07.2017 15:35:48"))
    end
  end
  describe "#technical_contacts" do
    it do
      expect(subject.technical_contacts).to be_a(Array)
      expect(subject.technical_contacts.size).to eq(2)
      expect(subject.technical_contacts[0].id).to eq("JTALIR")
      expect(subject.technical_contacts[0].name).to eq("Jaromír Talíř")
      expect(subject.technical_contacts[1]).to be_a(Whois::Record::Contact)
      expect(subject.technical_contacts[1].type).to eq(Whois::Record::Contact::TYPE_TECHNICAL)
      expect(subject.technical_contacts[1].id).to eq("JAROMIR-TALIR")
      expect(subject.technical_contacts[1].name).to eq("Jaromír Talíř")
      expect(subject.technical_contacts[1].organization).to eq(nil)
      expect(subject.technical_contacts[1].address).to eq("Americká 23\nPraha 2\n120 00\nCZ")
      expect(subject.technical_contacts[1].city).to eq(nil)
      expect(subject.technical_contacts[1].zip).to eq(nil)
      expect(subject.technical_contacts[1].state).to eq(nil)
      expect(subject.technical_contacts[1].country_code).to eq(nil)
      expect(subject.technical_contacts[1].phone).to eq(nil)
      expect(subject.technical_contacts[1].fax).to eq(nil)
      expect(subject.technical_contacts[1].email).to eq(nil)
      expect(subject.technical_contacts[1].created_on).to eq(Time.parse("01.12.2011 17:35:04"))
      expect(subject.technical_contacts[1].updated_on).to eq(nil)
    end
  end
  describe "#nameservers" do
    it do
      expect(subject.nameservers).to be_a(Array)
      expect(subject.nameservers.size).to eq(3)
      expect(subject.nameservers[0]).to be_a(Whois::Record::Nameserver)
      expect(subject.nameservers[0].name).to eq("d.ns.nic.cz")
      expect(subject.nameservers[0].ipv4).to eq("193.29.206.1")
      expect(subject.nameservers[0].ipv6).to eq("2001:678:1::1")
      expect(subject.nameservers[1]).to be_a(Whois::Record::Nameserver)
      expect(subject.nameservers[1].name).to eq("a.ns.nic.cz")
      expect(subject.nameservers[2]).to be_a(Whois::Record::Nameserver)
      expect(subject.nameservers[2].name).to eq("b.ns.nic.cz")
    end
  end
end
